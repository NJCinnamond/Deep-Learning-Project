# -*- coding: utf-8 -*-
"""AudioStyleTransferTutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4_0EqY6YRahBoyLS8WJWRD9nwurBd5A

We will use the original neural style transfer algorithm implemented by Leon A. Gatys, Alexander S. Ecker and Matthias Bethge for sound.

The tutorial is here: https://pytorch.org/tutorials/advanced/neural_style_tutorial.html#sphx-glr-advanced-neural-style-tutorial-py

This paper: https://arxiv.org/pdf/1710.11385.pdf explains how we can use the above algorithm and transport it to audio. We will need to convert the wave forms into 3D images, and feed it through the network. We will then use  Griffin & Limâ€™s algorithm to get the final waveform.

Additional Resource: 
https://dmitryulyanov.github.io/audio-texture-synthesis-and-style-transfer/
"""

from google.colab import drive
drive.mount("/content/drive/", force_remount=True)

from __future__ import print_function

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

from PIL import Image
import matplotlib.pyplot as plt

import torchvision.transforms as transforms
import torchvision.models as models

import copy
import librosa.version
import librosa.display
import numpy as np
import matplotlib.pyplot as plt

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

!ls "/content/drive/My Drive/AudioStyleTransfer/images"

"""**Generate Spectographs**"""

content_filename = "enter_filename_here"
style_filename = "enter_filename_here"

hop_length = 512
n_fft = 2048
n_mels= 128

def generate_spectogram(filename, title_name):
  timeseries, sampling_rate = librosa.load(filename)
  print("SAMPLING rate", sampling_rate)
  S = librosa.feature.melspectrogram(timeseries, sr=sampling_rate, n_fft=n_fft, hop_length=hop_length, n_mels=n_mels)
  print("S", S.shape)
  S_DB = librosa.power_to_db(S, ref=np.max)
  print("S_DB", S_DB)
  librosa.display.specshow(S_DB, sr=sampling_rate, hop_length=hop_length, 
                          x_axis='time', y_axis='mel');
  plt.title(title_name)
  plt.colorbar(format='%+2.0f dB');
  
  return S_DB, sampling_rate

content_temp, sampling_rate = generate_spectogram(content_filename, "Content Spectrogram")

style_temp, sampling_rate = generate_spectogram(style_filename, "Style Spectrogram")

# !pip install librosa==0.7
!pip install torchaudio -f https://download.pytorch.org/whl/torch_stable.html
import torchaudio

"""**Prepare Inputs for Transfer**"""

content_temp = torch.tensor(content_temp)
music_content = torch.ones(3, 128, 1293)
music_content[0] = content_temp
music_content[1] = content_temp
music_content[2] = content_temp

style_temp = torch.tensor(style_temp)
music_style = torch.ones(3, 128, 1293)
music_style[0] = style_temp
music_style[1] = style_temp
music_style[2] = style_temp

music_content = music_content.unsqueeze(0)
music_style = music_style.unsqueeze(0)
# music_input = music_content.clone()
music_input = torch.rand(music_content.shape)

print("CONTENT", music_content.shape)
print("STYLE", music_style.shape)
print("INPUT", music_input.shape)

music_content = music_content.cuda()
music_style = music_style.cuda()
music_input = music_input.cuda()

"""**Original Image Style Transfer Code Below**"""

class ContentLoss(nn.Module):

    def __init__(self, target,):
        super(ContentLoss, self).__init__()
        # we 'detach' the target content from the tree used
        # to dynamically compute the gradient: this is a stated value,
        # not a variable. Otherwise the forward method of the criterion
        # will throw an error.
        self.target = target.detach()

    def forward(self, input):
        self.loss = F.mse_loss(input, self.target)
        return input

def gram_matrix(input):
    a, b, c, d = input.size()  # a=batch size(=1)
    # b=number of feature maps
    # (c,d)=dimensions of a f. map (N=c*d)

    features = input.view(a * b, c * d)  # resise F_XL into \hat F_XL

    G = torch.mm(features, features.t())  # compute the gram product

    # we 'normalize' the values of the gram matrix
    # by dividing by the number of element in each feature maps.
    return G.div(a * b * c * d)

class StyleLoss(nn.Module):

    def __init__(self, target_feature):
        super(StyleLoss, self).__init__()
        self.target = gram_matrix(target_feature).detach()

    def forward(self, input):
        G = gram_matrix(input)
        self.loss = F.mse_loss(G, self.target)
        return input

cnn = models.vgg19(pretrained=True).features.to(device).eval()
print(models.vgg19(pretrained=True).features)
print(models.vgg19(pretrained=True).classifier)

cnn_normalization_mean = torch.tensor([0.485, 0.456, 0.406]).to(device)
cnn_normalization_std = torch.tensor([0.229, 0.224, 0.225]).to(device)

# create a module to normalize input image so we can easily put it in a
# nn.Sequential
class Normalization(nn.Module):
    def __init__(self, mean, std):
        super(Normalization, self).__init__()
        # .view the mean and std to make them [C x 1 x 1] so that they can
        # directly work with image Tensor of shape [B x C x H x W].
        # B is batch size. C is number of channels. H is height and W is width.
        self.mean = torch.tensor(mean).view(-1, 1, 1)
        self.std = torch.tensor(std).view(-1, 1, 1)

    def forward(self, img):
        # normalize img
        return (img - self.mean) / self.std

# desired depth layers to compute style/content losses :
content_layers_default = ['conv_1']
style_layers_default = ['conv_1', 'conv_2', 'conv_3', 'conv_4', 'conv_5']

def get_style_model_and_losses(cnn, normalization_mean, normalization_std,
                               style_img, content_img,
                               content_layers=content_layers_default,
                               style_layers=style_layers_default):
    cnn = copy.deepcopy(cnn)

    # normalization module
    normalization = Normalization(normalization_mean, normalization_std).to(device)

    # just in order to have an iterable access to or list of content/syle
    # losses
    content_losses = []
    style_losses = []

    # assuming that cnn is a nn.Sequential, so we make a new nn.Sequential
    # to put in modules that are supposed to be activated sequentially
    model = nn.Sequential(normalization)

    i = 0  # increment every time we see a conv
    for layer in cnn.children():
        if isinstance(layer, nn.Conv2d):
            i += 1
            name = 'conv_{}'.format(i)
        elif isinstance(layer, nn.ReLU):
            name = 'relu_{}'.format(i)
            # The in-place version doesn't play very nicely with the ContentLoss
            # and StyleLoss we insert below. So we replace with out-of-place
            # ones here.
            layer = nn.ReLU(inplace=False)
        elif isinstance(layer, nn.MaxPool2d):
            name = 'pool_{}'.format(i)
        elif isinstance(layer, nn.BatchNorm2d):
            name = 'bn_{}'.format(i)
        else:
            raise RuntimeError('Unrecognized layer: {}'.format(layer.__class__.__name__))

        model.add_module(name, layer)

        if name in content_layers:
            # add content loss:
            target = model(content_img).detach()
            content_loss = ContentLoss(target)
            model.add_module("content_loss_{}".format(i), content_loss)
            content_losses.append(content_loss)

        if name in style_layers:
            # add style loss:
            target_feature = model(style_img).detach()
            style_loss = StyleLoss(target_feature)
            model.add_module("style_loss_{}".format(i), style_loss)
            style_losses.append(style_loss)

    # now we trim off the layers after the last content and style losses
    for i in range(len(model) - 1, -1, -1):
        if isinstance(model[i], ContentLoss) or isinstance(model[i], StyleLoss):
            break

    model = model[:(i + 1)]

    return model, style_losses, content_losses

def get_input_optimizer(input_img):
    # this line to show that input is a parameter that requires a gradient
    optimizer = optim.LBFGS([input_img.requires_grad_()])
    return optimizer

def run_style_transfer(cnn, normalization_mean, normalization_std,
                       content_img, style_img, input_img, num_steps=5000,
                       style_weight=1000000, content_weight=1):
    """Run the style transfer."""
    print('Building the style transfer model..')
    model, style_losses, content_losses = get_style_model_and_losses(cnn,
        normalization_mean, normalization_std, style_img, content_img)
    optimizer = get_input_optimizer(input_img)
    print("MODEL PARAMETERS", model.parameters)

    print('Optimizing..')
    run = [0]
    while run[0] <= num_steps:

        def closure():
            # correct the values of updated input image
            input_img.data.clamp_(0, 1)

            optimizer.zero_grad()
            model(input_img)
            style_score = 0
            content_score = 0

            for sl in style_losses:
                style_score += sl.loss
            for cl in content_losses:
                content_score += cl.loss

            style_score *= style_weight
            content_score *= content_weight

            loss = style_score + content_score
            loss.backward()

            run[0] += 1
            if run[0] % 50 == 0:
                print("run {}:".format(run))
                print('Style Loss : {:4f} Content Loss: {:4f}'.format(
                    style_score.item(), content_score.item()))
                print()

            return style_score + content_score

        optimizer.step(closure)

    # a last correction...
    input_img.data.clamp_(0, 1)

    return input_img

output = run_style_transfer(cnn, cnn_normalization_mean, cnn_normalization_std,
                            music_content, music_style, music_input)

print(output.shape)
temp = output.squeeze(0)
temp = temp.mean(dim = 0)
print(temp.shape)

sampling_rate = 22050
librosa.display.specshow(temp.cpu().detach().numpy(), sr=sampling_rate, hop_length=hop_length, x_axis='time', y_axis='mel');
plt.title("Output Spectrogram")
plt.colorbar(format='%+2.0f dB');

temp = temp.cpu().detach().numpy()

temp = temp * -1
print(temp)

S = librosa.feature.inverse.mel_to_stft(temp)

print(S.shape)
y = librosa.griffinlim(S)
y = torch.tensor(y)
print(y.shape)
torchaudio.save('enter_filename_here', y, sampling_rate)

